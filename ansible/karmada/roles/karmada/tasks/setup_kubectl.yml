---
- name: Setup karmada kubeconfig
  when: inventory_hostname in groups['control']
  block:
    - name: Get Karmada API kubeconfig
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          kubectl -n {{ karmada_namespace }} get secret karmada-kubeconfig -o jsonpath='{.data.kubeconfig}' | base64 -d
        executable: /bin/bash
      register: karmada_kubeconfig
      changed_when: false

    - name: Setup Karmada API kubeconfig
      vars:
        kubeconfig: "{{ karmada_kubeconfig_temp_dir }}/karmada-apiserver"
      block:
        - name: Save Karmada kubeconfig to file
          ansible.builtin.copy:
            content: "{{ karmada_kubeconfig.stdout }}"
            dest: "{{ kubeconfig }}"
            mode: "0600"

        - name: Change server address in kubeconfig for API server
          ansible.builtin.shell: |
            KUBECONFIG={{ kubeconfig }} kubectl config set-cluster karmada-apiserver --server=https://127.0.0.1:{{ karmada_api_server_node_port }}
          register: csa_result
          changed_when:
            - csa_result.rc == 0

        - name: Merge API Server kubeconfig for {{ item }}
          ansible.builtin.shell: |
            TFILE=$(mktemp)
            mkdir -p ~{{ item }}/.kube
            touch ~{{ item }}/.kube/config
            KUBECONFIG={{ kubeconfig }}:~{{ item }}/.kube/config kubectl config view --flatten > ${TFILE}
            mv ${TFILE} ~{{ item }}/.kube/config
            chown -R {{ item }}:{{ item }} ~{{ item }}/.kube
          register: mv_result
          changed_when:
            - mv_result.rc == 0
          loop:
          - "root"
          - "{{ ansible_user }}"
          - "{{ user }}"

- name: Setup kubectl on ansible controller
  when:
    - setup_local_kubeconfig
    - inventory_hostname == groups['control'][0]
  block:
    - name: "Ensure staging directory exists on Ansible controller"
      ansible.builtin.file:
        path: "{{ controller_kubectl_staging_dir }}"
        state: directory
        mode: "0700"
      delegate_to: localhost
      become: false
      run_once: true # Only needs to run once per playbook execution

    - name: Check whether kubectl is installed on ansible controller
      delegate_to: 127.0.0.1
      become: false
      ansible.builtin.command: kubectl
      register: kubectl_installed
      ignore_errors: true
      changed_when: false

    - name: Apply karmada-apiserver kubeconfig to ansible controller
      when:
        - kubectl_installed.rc == 0
      vars:
        kubeconfig: "{{ controller_kubectl_staging_dir }}/karmada-apiserver"
      block:
        - name: Copy kubeconfig to ansible controller
          ansible.builtin.fetch:
            src: "{{ karmada_kubeconfig_temp_dir }}/karmada-apiserver"
            dest: "{{ kubeconfig }}"
            flat: true

        - name: Change server address in kubeconfig on ansible controller
          ansible.builtin.shell: |
            KUBECONFIG={{ kubeconfig }} kubectl config set-cluster karmada-apiserver --server=https://{{ ansible_host }}:{{ karmada_api_server_node_port }}
          delegate_to: localhost
          become: false
          register: csa_result
          changed_when:
            - csa_result.rc == 0

        - name: Merge with any existing kubeconfig on ansible controller
          ansible.builtin.shell: |
            TFILE=$(mktemp)
            touch {{ controller_kubeconfig }}
            KUBECONFIG={{ kubeconfig }}:{{ controller_kubeconfig }} kubectl config view --flatten > ${TFILE}
            mv ${TFILE} {{ controller_kubeconfig }}
          delegate_to: localhost
          become: false
          register: mv_result
          changed_when:
            - mv_result.rc == 0

    - name: "Clean up staging directory on Ansible controller"
      ansible.builtin.file:
        path: "{{ controller_kubectl_staging_dir }}"
        state: absent
      delegate_to: localhost
      become: false
      run_once: true
