---
- name: Remove node from microk8s
  block:
    - name: Verify node info is present before deleting
      ansible.builtin.assert:
        that: inventory_hostname in chutes_nodes
        fail_msg: Node information for {{ inventory_hostname }} is not present. Run the 'get-node-info' tag to resolve.
        success_msg: Found information for {{ inventory_hostname }}

    - name: Run delete node command remotely
      ansible.builtin.command: >
        chutes-miner delete-node --name {{ inventory_hostname }}  --hotkey {{ remote_hotkey_path }}
      register: remote_delete_output
      failed_when: remote_delete_output.rc != 0
      changed_when: false
      delegate_to: "{{ groups['microk8s'][0] }}"
      when: not run_cli_locally | default(true)

    - name: Run delete node command locally
      ansible.builtin.command: >
        chutes-miner delete-node --name {{ inventory_hostname }}  --hotkey {{ hotkey_path }}
        --miner-api http://{{ ansible_host }}:{{ miner_api_port | default(32000) }}
      register: local_delete_output
      failed_when: local_delete_output.rc != 0
      become: false
      changed_when: false
      delegate_to: localhost
      when: run_cli_locally | default(false)

    - name: Set delete output variable
      ansible.builtin.set_fact:
        delete_output: >-
          {{ remote_delete_output if (remote_delete_output is defined and
            remote_delete_output.stdout is defined) else local_delete_output }}

    - name: Verify node deleted
      ansible.builtin.assert:
        that: delete_output.rc == 0
        fail_msg: "Failed to delete node {{ inventory_hostname }}"
        success_msg: "Successfully deleted {{ inventory_hostname }}"

    - name: Remove node from microk8s
      ansible.builtin.command: >
        microk8s remove-node {{ inventory_hostname }}
      register: delete_node_output
      failed_when: delete_node_output.rc != 0
      changed_when: false
      delegate_to: "{{ groups['microk8s'][0] }}"
