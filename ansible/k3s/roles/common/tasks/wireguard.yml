---
- name: Setup Wireguard
  vars:
    primary_node: "{{ groups['control'][0] }}"
    primary_wg_ip: "{{ hostvars[groups['control'][0]].wireguard_ip }}"
  block:
  - name: Create temporary test file
    ansible.builtin.file:
      path: /tmp/connectivity-test
      state: touch
      mode: '0644'
    changed_when: false

  - name: Get public/external IP address # noqa command-instead-of-module
    ansible.builtin.shell: |
      curl -s https://ifconfig.me
    register: public_ip
    changed_when: false
    ignore_errors: true

  - name: Set detected public IP
    ansible.builtin.set_fact:
      detected_public_ip: '{{ public_ip.stdout }}'
    when: public_ip.rc == 0

  - name: Verify detected IP matches inventory IP
    ansible.builtin.debug:
      msg: "Warning: Detected public IP ({{ detected_public_ip }}) doesn't match inventory ansible_host \
        ({{ ansible_host }}). This might cause connectivity issues."
    when:
      - public_ip.rc == 0
      - detected_public_ip != ansible_host
      - cross_network | bool

  - name: Validate wireguard_ip is defined for all hosts
    ansible.builtin.assert:
      that:
        - wireguard_ip is defined
        - wireguard_ip | length > 0
      msg: "wireguard_ip must be explicitly defined for host {{ inventory_hostname }}"

  - name: Determine effective CIDR for this host
    ansible.builtin.set_fact:
      effective_wireguard_cidr: "{{ wireguard_override_cidr | default(wireguard_primary_cidr) }}"

  - name: Validate IP is within CIDR using Python
    ansible.builtin.shell: |
      python3 -c "
      import ipaddress
      ip = ipaddress.ip_address('{{ wireguard_ip }}')
      network = ipaddress.ip_network('{{ effective_wireguard_cidr }}', strict=False)
      assert ip in network, f'IP {ip} not in network {network}'
      print(f'âœ“ {ip} is valid within {network}')
      "
    register: ip_validation
    when: validate_ip_in_subnet | default(true)
    changed_when: false

  - name: Validate no IP conflicts across all hosts
    ansible.builtin.assert:
      that:
        - groups['workers'] | map('extract', hostvars, 'wireguard_ip') | list | unique | length == groups['workers'] | length
      msg: |
        IP conflict detected in WireGuard assignments!
        All assigned IPs: {{ groups['workers'] | map('extract', hostvars, 'wireguard_ip') | list }}
        Duplicates: {{ groups['workers'] | map('extract', hostvars, 'wireguard_ip') | list | difference(groups['workers'] | map('extract', hostvars, 'wireguard_ip') | list | unique) }}
    run_once: true

  - name: Set WireGuard configuration facts
    ansible.builtin.set_fact:
      wireguard_cidr: "{{ effective_wireguard_cidr }}"

  - name: Ensure ping is installed
    ansible.builtin.apt:
      name:
        - iputils-ping
      state: present

  - name: Install Wireguard
    ansible.builtin.apt:
      name: wireguard
      state: present

  # Ensure all node keys are always available in hostvars
  - name: Populate node WG keys
    block:

      - name: Check if Wireguard private key exists
        stat:
          path: /etc/wireguard/private.key
        register: wg_private_exists
        delegate_to: "{{ item }}"
        loop: "{{ groups['all'] }}"

      - name: Generate WireGuard keys
        ansible.builtin.shell:
          cmd: |
            set -o pipefail
            wg genkey > /etc/wireguard/private.key
            cat /etc/wireguard/private.key | wg pubkey > /etc/wireguard/public.key
            chmod 600 /etc/wireguard/private.key /etc/wireguard/public.key
          executable: /bin/bash
        delegate_to: "{{ item }}"
        when: not (wg_private_exists.results | selectattr('item', 'equalto', item) | first).stat.exists
        loop: "{{ groups['all'] }}"

      - name: Get public keys
        slurp:
          src: /etc/wireguard/public.key
        register: public_keys
        delegate_to: "{{ item }}"
        loop: "{{ groups['all'] }}"

      - name: Get private keys
        slurp:
          src: /etc/wireguard/private.key
        register: private_keys
        delegate_to: "{{ item }}"
        loop: "{{ groups['all'] }}"

      - name: Add node keys to hostvars
        ansible.builtin.add_host:
          name: "{{ item }}"
          wg_public: "{{ (public_keys.results | selectattr('item', 'equalto', item) | first).content | b64decode | trim }}"
          wg_private: "{{ (private_keys.results | selectattr('item', 'equalto', item) | first).content | b64decode | trim }}"
        loop: "{{ groups['all'] }}"

      - name: Debug keys
        ansible.builtin.debug:
          msg: "{{ item }} -> {{ hostvars[item].wg_private }} | {{ hostvars[item].wg_public }}"
        loop: "{{ groups['all'] }}"

    run_once: true

  - name: Create WireGuard configuration directory
    ansible.builtin.file:
      path: /etc/wireguard
      state: directory
      mode: '0700'
    when: cross_network | bool

  - name: Create WireGuard configuration [All Control Nodes]
    ansible.builtin.template:
      src: wg0-primary.conf.j2
      dest: /etc/wireguard/wg0.conf
      owner: root
      group: root
      mode: '0600'
    vars:
      target_host: "{{ item }}"
    delegate_to: "{{ item }}"
    loop: "{{ groups['control'] }}"
    when: 
      - groups['control'] | length > 0

  - name: Create WireGuard configuration [Worker]
    when: inventory_hostname in groups['workers']
    ansible.builtin.template:
      src: wg0-worker.conf.j2
      dest: /etc/wireguard/wg0.conf
      owner: root
      group: root
      mode: '0600'

  - name: Start WireGuard
    ansible.builtin.systemd:
      name: wg-quick@wg0
      enabled: true
      state: started
    when: cross_network | bool

  - name: Set MTU for Wireguard interface
    ansible.builtin.command: ip link set mtu {{ wireguard_mtu | default(1380) }} dev wg0
    changed_when: false

  - name: Set DNS for wg0
    ansible.builtin.shell: |
      resolvectl dns wg0 8.8.8.8 8.8.4.4
      resolvectl domain wg0 ~.
    register: resolvectl_result
    changed_when: resolvectl_result.rc == 0
    failed_when: resolvectl_result.rc != 0

  - name: Restart WG [Control]
    block:

      - name: Restart WG [Control]
        ansible.builtin.shell: wg-quick down wg0 && wg-quick up wg0
        delegate_to: "{{ item }}"
        loop: "{{ groups['control'] }}"

    run_once: true
    when: 
      - groups['control'] | length > 0

  - name: Restart WG
    ansible.builtin.shell: wg-quick down wg0 && wg-quick up wg0
    changed_when: false
    when: inventory_hostname not in groups['control']

  - name: Wait for WireGuard interface to be up
    ansible.builtin.wait_for:
      path: /sys/class/net/wg0/operstate
    when: cross_network | bool

  - name: Ping primary node from non-primary nodes
    ansible.builtin.command: ping -c 1 {{ primary_wg_ip }}
    register: ping_result
    until: ping_result.rc == 0
    retries: 3
    delay: 5
    when: not inventory_hostname == primary_node
    failed_when: ping_result.rc != 0
    changed_when: false

  - name: Fail if primary node is not pingable
    ansible.builtin.fail:
      msg: Cannot ping primary node at {{ primary_wg_ip }} from {{ inventory_hostname }}
    when:
      - not inventory_hostname == primary_node
      - ping_result.failed
