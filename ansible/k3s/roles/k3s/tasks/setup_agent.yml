
- name: Get the token from the control plane
  block:
    - name: Get the token if randomly generated
      when: token is not defined
      run_once: true
      block:

        - name: Wait for token
          ansible.builtin.wait_for:
            path: /var/lib/rancher/k3s/server/token
          delegate_to: "{{ groups['control'][0] }}"

        - name: Read node-token from master
          ansible.builtin.slurp:
            src: /var/lib/rancher/k3s/server/token
          register: node_token
          delegate_to: "{{ groups['control'][0] }}"

        - name: Store Master node-token
          ansible.builtin.set_fact:
            token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"
          delegate_facts: true
          delegate_to: "{{ groups['control'][0] }}"

    - name: Set token
      ansible.builtin.set_fact:
        token: "{{ hostvars[groups['control'][0]].token }}"

- name: Delete any existing token from the environment if different from the new one
  ansible.builtin.lineinfile:
    state: absent
    path: '{{ systemd_dir }}/k3s-agent.service.env'
    regexp: ^K3S_TOKEN=\s*(?!{{ token }}\s*$)

- name: Add the token for joining the cluster to the environment
  no_log: true  # avoid logging the server token
  ansible.builtin.lineinfile:
    path: '{{ systemd_dir }}/k3s-agent.service.env'
    line: '{{ item }}'
  with_items:
    - K3S_TOKEN={{ token }}

- name: Copy K3s service file
  register: k3s_agent_service
  ansible.builtin.template:
    src: k3s-agent.service.j2
    dest: '{{ systemd_dir }}/k3s-agent.service'
    owner: root
    group: root
    mode: u=rw,g=r,o=r

- name: Enable and check K3s service
  ansible.builtin.systemd:
    name: k3s-agent
    daemon_reload: '{{ true if k3s_agent_service.changed else false }}'
    state: "{{ 'restarted' if (k3s_agent_service.changed or _agent_config_result.changed) else 'started' }}"
    enabled: true

- name: Restart k3s servers
  ansible.builtin.debug:
    msg: Restart k3s servers after adding agent {{ inventory_hostname }}
  notify: restart k3s servers