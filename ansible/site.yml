- name: Setup Kubernetes Node
  hosts: all
  become: yes
  any_errors_fatal: true
  vars:
    username: "{{ user }}"
    ssh_public_keys: "{{ ssh_keys }}"
    microk8s_channel: "1.31/stable"
    enable_gpu: "{{ gpu_enabled | default(false) }}"

    # TEE flags for AMD.
    shared_dir: /shared
    amdsev_repo_url: https://github.com/AMDESE/AMDSEV.git
    amdsev_branch: sev-snp-devel
    nvtrust_repo_url: https://github.com/NVIDIA/nvtrust.git
    amdsev_dir: "{{ shared_dir }}/AMDSEV"
    nvtrust_dir: "{{ shared_dir }}/nvtrust"
    kernel_base_version: 5.19.0-rc6
    cc_nvidia_cuda_keyring_url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
    cc_nvidia_cuda_keyring_deb: /tmp/cuda-keyring_1.1-1_all.deb
    cc_cuda_version: "12-4"
    cc_nvidia_driver_version_short: "550"
    required_cpu_flags:
      - sev
      - sev_es
      #- sev_snp ?? shows up after kernel updates I think?

  tasks:
    - name: System prerequisites and base config
      ansible.builtin.include_tasks: tasks/prerequisites.yaml

    - name: AMD SEV setup and configuration
      ansible.builtin.include_tasks: tasks/amd_sev.yaml
      when: amd_sev | default(false)

    - name: Non-TEE CUDA installation
      ansible.builtin.include_tasks: tasks/non_tee_gpu_setup.yaml
      when: not amd_sev | default(false) and enable_gpu | bool

    - name: Microk8s installation and configuration
      ansible.builtin.include_tasks: tasks/microk8s.yaml

    - name: Reboot
      reboot:
        msg: "Rebooting..."
        reboot_command: "reboot"
        connect_timeout: 5
        reboot_timeout: 900
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: >
        (gpu_setup is defined and gpu_setup.changed) or
        (ipv6_disabled is defined and ipv6_disabled.changed) or
        (sev_reboot_required | default(false))
      register: rebooted

    - name: Set NVIDIA device permissions
      file:
        path: "{{ item }}"
        mode: '0666'
      with_fileglob:
        - /dev/nvidia*
        - /dev/nvidiactl
        - /dev/nvidia-uvm
        - /dev/nvidia-uvm-tools
      when: gpu_enabled | bool

    - name: Create NVIDIA character device symlinks
      when: gpu_enabled | bool
      shell: |
        ls /dev/nvidia* | egrep 'nvidia[0-9]$' | while read i
        do
          N=$(echo $i | sed 's/\/dev\/nvidia//');
          MAJ=$(ls -l $i | awk '{print $5}' | cut -d, -f1)
          MIN=$(ls -l $i | awk '{print $6}')
          mkdir -p /dev/char/$MAJ:$MIN
          ln -sf $i /dev/char/$MAJ:$MIN
        done

    - name: Wait for system to be ready
      wait_for_connection:
        timeout: 600
      when: rebooted.changed

    - name: Set hostname again just in case
      systemd:
        name: set-hostname
        enabled: yes
        state: restarted
        daemon_reload: yes
      when: rebooted.changed

    - name: Wait for microk8s to be ready
      shell: microk8s status | grep -E "microk8s is running|acting as a node in a cluster"
      register: result
      until: result.rc == 0
      retries: 30
      delay: 10
      ignore_errors: yes
      when: rebooted.changed

    - name: Install NVIDIA Container Toolkit
      apt:
        name: nvidia-container-toolkit
        state: present
      when: gpu_enabled | bool

    - name: Configure NVIDIA Container Toolkit
      shell: |
        nvidia-ctk runtime configure --runtime=docker --set-as-default
        nvidia-ctk runtime configure --runtime=containerd --set-as-default
        nvidia-ctk runtime configure --runtime=crio --set-as-default --config=/etc/crio/crio.conf.d/99-nvidia.conf
      register: container_runtime
      when: gpu_enabled | bool

    - name: Find all microk8s services
      shell: systemctl list-units --full --all "snap.microk8s.*" --plain --no-legend | awk '{print $1}'
      register: microk8s_services

    - name: Restart all microk8s services
      systemd:
        name: "{{ item }}"
        state: restarted
      loop: "{{ microk8s_services.stdout_lines }}"
      when: container_runtime.changed

    - name: Install iptables-persistent
      package:
        name:
          - iptables-persistent
          - netfilter-persistent
        state: present
      when: is_primary | bool

    - name: Add forwarding rule
      iptables:
        chain: FORWARD
        in_interface: wg0
        jump: ACCEPT
        state: present
      when: is_primary | bool

    - name: Get network interface information
      ansible.builtin.shell: |
        ip -o link show | awk '$2 !~ /^(docker|cali|cilium|veth|vxlan|lo|wg)/ && $2 ~ /^en/ {gsub(/:/, "", $2); print $2}'
      register: ethernet_interfaces
      changed_when: false

    - name: Add NAT masquerade rules for ethernet interfaces
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: "{{ item }}"
        jump: MASQUERADE
        state: present
      loop: "{{ ethernet_interfaces.stdout_lines }}"
      when: is_primary | bool

    - name: Save iptables rules
      shell: |
        netfilter-persistent save
        netfilter-persistent reload
      when: is_primary | bool

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        sysctl_set: yes
        reload: yes
      when: is_primary | bool

    - name: Fix containerd
      shell: |
        DISABLED=$(egrep 'disabled_plugins' /etc/containerd/config.toml | grep -v 'disabled_plugins = \[\]')
        if [ ! -z "$PKGS" ]; then
          perl -pi -e 's/^\s*disabled_plugins\s*=/##disabled_plugins = []/g' /etc/containerd/config.toml
          systemctl restart containerd
        fi

    - name: Include GPU CC Mode Enablement tasks if enable_gpu_cc_mode is true
      ansible.builtin.include_tasks: tasks/enable_gpu_cc.yaml
      when: amd_sev | default(false)
      register: gpu_cc_setup_result
