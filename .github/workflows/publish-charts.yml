name: Publish Helm Charts
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'charts/**'
  push:
    branches:
      - main
    paths:
      - 'charts/**'
  workflow_dispatch:
env:
  CHART_DIR: charts
  HELM_CHART_DIR: charts-gh-pages
  REPO_URL: "https://rayonlabs.github.io/chutes-miner"
jobs:
  check-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history to ensure base ref availability
      - name: Fetch base branch for PRs
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq --version
      - name: Check Chart.yaml changes and validate
        id: check
        run: |
          # Determine base ref and branch context
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.base_ref }}"
            IS_MAIN="${{ github.base_ref == 'main' && 'true' || 'false' }}"
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BASE_REF="HEAD~1"
            IS_MAIN="${{ github.ref_name == 'main' && 'true' || 'false' }}"
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/\//-/g')

          # Initialize variables
          CURRENT_VERSIONS=""
          PREVIOUS_VERSIONS=""
          VERSION_CHANGES=""
          INVALID_VERSIONS=""
          SHOULD_PUBLISH=false

          # Get current versions
          for chart_dir in ${{ env.CHART_DIR }}/*/Chart.yaml; do
            if [ -f "$chart_dir" ]; then
              chart_name=$(basename "$(dirname "$chart_dir")")
              version=$(yq e '.version' "$chart_dir")
              if [ -n "$version" ]; then
                CURRENT_VERSIONS="${CURRENT_VERSIONS}${chart_name}:${version}\n"
              fi
            fi
          done

          # Get previous versions
          git checkout "$BASE_REF" -- ${{ env.CHART_DIR }}/ || { echo "::error::Failed to checkout $BASE_REF"; exit 1; }
          for chart_dir in ${{ env.CHART_DIR }}/*/Chart.yaml; do
            if [ -f "$chart_dir" ]; then
              chart_name=$(basename "$(dirname "$chart_dir")")
              version=$(yq e '.version' "$chart_dir")
              if [ -n "$version" ]; then
                PREVIOUS_VERSIONS="${PREVIOUS_VERSIONS}${chart_name}:${version}\n"
              fi
            fi
          done
          git checkout HEAD -- ${{ env.CHART_DIR }}/

          # Debug output
          echo "Current versions:"
          echo -e "$CURRENT_VERSIONS"
          echo "Previous versions:"
          echo -e "$PREVIOUS_VERSIONS"

          # Compare and validate
          while IFS=: read -r chart_name current_version; do
            # Skip empty or invalid lines
            if [ -z "$chart_name" ] || [ -z "$current_version" ]; then
              continue
            fi
            previous_version=$(echo -e "$PREVIOUS_VERSIONS" | grep "^$chart_name:" | cut -d: -f2 || echo "")
            
            if [ -n "$current_version" ] && [ "$current_version" != "$previous_version" ]; then
              echo "✅ $chart_name: $previous_version → $current_version"
              VERSION_CHANGES="${VERSION_CHANGES}${chart_name}: $current_version\n"
              
              if [ "$IS_MAIN" = "true" ]; then
                # For main branch or PRs targeting main, block pre-release versions
                if [[ "$current_version" =~ -dev$|-alpha$|-beta$|-rc[0-9]*$ ]]; then
                  INVALID_VERSIONS="${INVALID_VERSIONS}${chart_name}: $current_version\n"
                else
                  SHOULD_PUBLISH=true
                fi
              else
                # For PRs targeting non-main branches, allow only pre-release versions
                if [[ ! "$current_version" =~ -dev$|-alpha$|-beta$|-rc[0-9]*$ ]]; then
                  INVALID_VERSIONS="${INVALID_VERSIONS}${chart_name}: $current_version\n"
                else
                  SHOULD_PUBLISH=true
                fi
              fi
            fi
          done <<< "$CURRENT_VERSIONS"

          # Block merge/publish if invalid versions are detected
          if [ -n "$INVALID_VERSIONS" ]; then
            if [ "$IS_MAIN" = "true" ]; then
              echo -e "🚫 Blocking operation on main: Invalid pre-release versions detected\n$INVALID_VERSIONS"
            else
              echo -e "🚫 Blocking publish from non-main branch: Production versions not allowed\n$INVALID_VERSIONS"
            fi
            echo "::error::Invalid versions detected:$INVALID_VERSIONS"
            exit 1
          fi

          # Output to GITHUB_OUTPUT
          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          echo "is_main=$IS_MAIN" >> $GITHUB_OUTPUT
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "version_changes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$VERSION_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Checkout existing charts
        if: steps.check.outputs.should_publish == 'true'
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: existing-charts
      - name: Package and publish charts
        if: steps.check.outputs.should_publish == 'true'
        id: package
        run: |
          mkdir -p ${{ env.HELM_CHART_DIR }}

          # Copy existing charts
          [ -d existing-charts ] && cp -r existing-charts/* ${{ env.HELM_CHART_DIR }}/

          # Cleanup dev charts for non-existent branches on push to main
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ steps.check.outputs.is_main }}" = "true" ]; then
            echo "Checking for orphaned dev charts"
            if [ -f "${{ env.HELM_CHART_DIR }}/index.yaml" ]; then
              # Extract dev chart versions and their branch suffixes
              DEV_CHARTS=$(yq e '.entries[] | select(.version | test("-dev-|-alpha-|-beta-|-rc[0-9]*-")) | .name + ":" + .version' "${{ env.HELM_CHART_DIR }}/index.yaml")
              while IFS=: read -r chart_name chart_version; do
                if [ -z "$chart_name" ] || [ -z "$chart_version" ]; then
                  continue
                fi
                # Extract branch suffix (e.g., feature-branch from 0.0.1-dev-feature-branch)
                BRANCH_SUFFIX=$(echo "$chart_version" | grep -oE '[^-]+$' || echo "")
                if [ -n "$BRANCH_SUFFIX" ]; then
                  # Check if branch exists using GitHub API
                  RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    "https://api.github.com/repos/${{ github.repository }}/branches/$BRANCH_SUFFIX")
                  if [ "$RESPONSE" != "200" ]; then
                    echo "Removing orphaned dev chart: $chart_name-$chart_version"
                    rm -f "${{ env.HELM_CHART_DIR }}/$chart_name-$chart_version.tgz" || true
                  fi
                fi
              done <<< "$DEV_CHARTS"
            fi
          fi

          # Package changed charts
          NEW_CHARTS=0
          CHANGED_CHARTS=$(echo "${{ steps.check.outputs.version_changes }}" | grep -oE '^[a-zA-Z0-9-]+' | sort -u)

          for chart_name in $CHANGED_CHARTS; do
            if [ -d "${{ env.CHART_DIR }}/$chart_name" ]; then
              chart_version=$(yq e '.version' "${{ env.CHART_DIR }}/$chart_name/Chart.yaml")
              
              # Append sanitized branch name to version for PRs
              if [ "${{ github.event_name }}" = "pull_request" ]; then
                chart_version="$chart_version-${{ steps.check.outputs.sanitized_branch }}"
              fi

              if [ -f "${{ env.HELM_CHART_DIR }}/$chart_name-$chart_version.tgz" ]; then
                echo "⚠️ $chart_name-$chart_version already exists, skipping"
                continue
              fi

              helm lint "${{ env.CHART_DIR }}/$chart_name/"
              helm package "${{ env.CHART_DIR }}/$chart_name"